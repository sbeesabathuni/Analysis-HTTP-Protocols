/// <reference types="node" />
import { EventEmitter } from 'events';
import { Socket } from 'dgram';
import { SessionType, StreamID, PacketNumber, ConnectionID, SocketAddress } from './internal/protocol';
import { kID, kStreams, kSocket, kState, kType, kVersion, kACKHandler, kNextStreamID, kNextPacketNumber } from './internal/symbol';
import { Frame, StreamFrame, AckFrame } from './internal/frame';
import { Packet, RegularPacket } from './internal/packet';
import { Stream } from './stream';
import { BufferVisitor } from './internal/common';
export declare class Session extends EventEmitter {
    protected [kID]: ConnectionID;
    protected [kType]: SessionType;
    protected [kStreams]: Map<number, Stream>;
    protected [kNextStreamID]: StreamID;
    protected [kState]: SessionState;
    protected [kACKHandler]: ACKHandler;
    protected [kSocket]: Socket | null;
    protected [kVersion]: string;
    protected [kNextPacketNumber]: PacketNumber;
    constructor(id: ConnectionID, type: SessionType);
    readonly id: string;
    readonly version: string;
    readonly isClient: boolean;
    readonly destroyed: boolean;
    readonly localAddr: {
        port: number;
        family: string;
        address: string;
        socketAddress: SocketAddress | null;
    };
    readonly remoteAddr: {
        port: number;
        family: string;
        address: string;
        socketAddress: SocketAddress | null;
    };
    _sendFrame(frame: Frame, callback: (...args: any[]) => void): void;
    _sendPacket(packet: Packet, callback: (...args: any[]) => void): void;
    _handleRegularPacket(packet: RegularPacket, rcvTime: number, _bufv: BufferVisitor): void;
    /**
     * @param {StreamFrame} frame
     */
    _handleStreamFrame(frame: StreamFrame): void;
    _handleACKFrame(_frame: AckFrame): void;
    request(options: any): Stream;
    goaway(_code: number, _lastStreamID: StreamID, _opaqueData: Buffer): void;
    ping(): Promise<any>;
    setTimeout(_msecs: number): void;
    close(_err: any): void;
    _closeRemote(_err: any): void;
    _closeLocal(_err: any): void;
    destroy(): void;
    ref(): void;
    unref(): void;
}
export declare class SessionState {
    localFamily: string;
    localAddress: string;
    localPort: number;
    localAddr: SocketAddress | null;
    remoteFamily: string;
    remoteAddress: string;
    remotePort: number;
    remoteAddr: SocketAddress | null;
    pendingAck: number;
    bytesRead: number;
    bytesWritten: number;
    lastNetworkActivityTime: number;
    destroyed: boolean;
    shutdown: boolean;
    shuttingDown: boolean;
    versionNegotiated: boolean;
    keepAlivePingSent: boolean;
    constructor();
}
export declare class ACKHandler {
    ack(_val: any): void;
}
