/// <reference types="node" />
import { EventEmitter } from 'events';
import { Socket, AddressInfo } from 'dgram';
import { kSocket, kServer } from './internal/symbol';
import { ConnectionID } from './internal/protocol';
import { Session } from './session';
export declare class ServerSession extends Session {
    [kServer]: Server;
    constructor(id: ConnectionID, socket: Socket, server: Server);
    readonly server: Server;
}
export declare class Server extends EventEmitter {
    [kSocket]: Socket | null;
    localFamily: string;
    localAddress: string;
    localPort: number;
    listening: boolean;
    conns: Map<string, ServerSession>;
    constructor();
    address(): AddressInfo;
    listen(port: number, address: string): Promise<{}>;
    close(_err: any): void;
    getConnections(): Promise<number>;
    ref(): void;
    unref(): void;
}
