/// <reference types="node" />
import { Duplex } from 'stream';
import { StreamID } from './internal/protocol';
import { StreamFrame } from './internal/frame';
import { kID, kSession, kState } from './internal/symbol';
import { Session } from './session';
export declare class Stream extends Duplex {
    private [kID];
    private [kSession];
    private [kState];
    constructor(streamID: StreamID, session: Session, options: any);
    readonly id: number;
    readonly session: Session;
    readonly aborted: boolean;
    close(_code: any): void;
    reset(err: Error): Promise<number>;
    _handleFrame(frame: StreamFrame): void;
    _flushData(shouldFin: boolean, callback: (...args: any[]) => void): void;
    _write(chunk: Buffer, _encoding: string, callback: (...args: any[]) => void): void;
    _final(callback: (...args: any[]) => void): void;
    _read(size?: number): void;
}
