/// <reference types="node" />
import { AddressInfo } from 'dgram';
import { kVal } from './symbol';
import { BufferVisitor } from './common';
export declare enum SessionType {
    SERVER = 0,
    CLIENT = 1,
}
export declare enum FamilyType {
    IPv4 = "IPv4",
    IPv6 = "IPv6",
}
export declare const MaxOffset: number;
export declare const MaxReceivePacketSize = 1350;
export declare const MaxStreamBufferSize = 1280;
/**
 * Returns supported version.
 */
export declare function getVersion(): string;
/**
 * Returns supported versions array.
 */
export declare function getVersions(): string[];
/**
 * Chooses the best version in the overlap of ours and theirs.
 */
export declare function chooseVersion(theirs: string[]): string;
/**
 * Returns true if the server supports this version.
 */
export declare function isSupportedVersion(version: string): boolean;
/** Protocol representing a base protocol. */
export declare abstract class Protocol {
    protected readonly [kVal]: any;
    constructor(val: any);
    abstract equals(other: Protocol): boolean;
    abstract byteLen(arg?: any): number;
    abstract writeTo(bufv: BufferVisitor, arg?: any): BufferVisitor;
    abstract valueOf(): any;
    abstract toString(): string;
    static fromBuffer(_bufv: BufferVisitor, _len?: number): Protocol;
}
/** ConnectionID representing a connectionID. */
export declare class ConnectionID extends Protocol {
    constructor(id: string);
    /**
     * @return {string} - 16 length hex string
     */
    valueOf(): string;
    equals(other: ConnectionID): boolean;
    byteLen(): number;
    writeTo(bufv: BufferVisitor): BufferVisitor;
    toString(): string;
    static fromBuffer(bufv: BufferVisitor): ConnectionID;
    static random(): ConnectionID;
}
/** PacketNumber representing a packetNumber. */
export declare class PacketNumber extends Protocol {
    constructor(val: number);
    valueOf(): number;
    nextNumber(): PacketNumber;
    delta(other: PacketNumber): number;
    closestTo(a: PacketNumber, b: PacketNumber): PacketNumber;
    flagBits(): number;
    equals(other: PacketNumber): boolean;
    byteLen(isFull?: boolean): number;
    writeTo(bufv: BufferVisitor, isFull?: boolean): BufferVisitor;
    toString(): string;
    static flagToByteLen(flagBits: number): number;
    static fromBuffer(bufv: BufferVisitor, len: number): PacketNumber;
}
/** StreamID representing a streamID. */
export declare class StreamID extends Protocol {
    constructor(id: number);
    valueOf(): number;
    flagBits(): number;
    nextID(): StreamID;
    equals(other: StreamID): boolean;
    byteLen(isFull?: boolean): number;
    writeTo(bufv: BufferVisitor, isFull?: boolean): BufferVisitor;
    toString(): string;
    /**
     * 2 bits -> 8/8, 16/8, 24/8, 32/8
     */
    static flagToByteLen(flagBits: number): number;
    static fromBuffer(bufv: BufferVisitor, len: number): StreamID;
}
/** Offset representing a data offset. */
export declare class Offset extends Protocol {
    constructor(offset: number);
    valueOf(): number;
    equals(other: Offset): boolean;
    byteLen(isFull?: boolean): number;
    /**
     * 0, 16/8, 24/8, 32/8, 40/8, 48/8, 56/8, 64/8 -> 3 bits
     */
    flagBits(): number;
    writeTo(bufv: BufferVisitor, isFull?: boolean): BufferVisitor;
    toString(): string;
    nextOffset(byteLen: number): Offset;
    /**
     * 3 bits -> 0, 16/8, 24/8, 32/8, 40/8, 48/8, 56/8, 64/8
     */
    static flagToByteLen(flagBits: number): number;
    static fromBuffer(bufv: BufferVisitor, len: number): Offset;
}
/** SocketAddress representing a socket address. */
export declare class SocketAddress extends Protocol {
    port: number;
    address: string;
    family: FamilyType;
    constructor(obj: AddressInfo);
    valueOf(): {
        family: FamilyType;
        address: string;
        port: number;
    };
    equals(other: SocketAddress): boolean;
    byteLen(): number;
    writeTo(bufv: BufferVisitor): BufferVisitor;
    toString(): string;
    static fromBuffer(bufv: BufferVisitor): SocketAddress;
}
/** QuicTag representing a QUIC tag. */
export declare class QuicTag extends Protocol {
    name: string;
    keys: string[];
    tags: Map<string, Buffer>;
    constructor(name: string);
    valueOf(): {
        name: string;
        keys: string[];
        tags: Map<string, Buffer>;
    };
    setTag(key: string, val: Buffer): void;
    getTag(key: string): Buffer | undefined;
    [Symbol.iterator](): IterableIterator<[string, Buffer]>;
    equals(other: QuicTag): boolean;
    byteLen(): number;
    writeTo(bufv: BufferVisitor): BufferVisitor;
    toString(): string;
    static fromBuffer(bufv: BufferVisitor): QuicTag;
}
