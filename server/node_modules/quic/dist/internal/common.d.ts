/// <reference types="node" />
import { lookup as dnsLookup } from 'dns';
export declare const lookup: typeof dnsLookup.__promisify__;
export interface BufferVisitor extends Buffer {
    v: Visitor;
}
/** Visitor representing a Buffer visitor. */
export declare class Visitor {
    start: number;
    end: number;
    constructor(start?: number, end?: number);
    reset(start?: number, end?: number): this;
    walk(steps: number): this;
    static wrap(buf: Buffer): BufferVisitor;
}
export interface ToBuffer {
    byteLen(): number;
    writeTo(bufv: BufferVisitor): BufferVisitor;
}
export declare function toBuffer(obj: ToBuffer): BufferVisitor;
export declare const Float16MaxValue = 4396972769280;
export declare function readUFloat16(buf: Buffer, offset?: number): number;
export declare function writeUFloat16(buf: Buffer, value: number, offset: number): Buffer;
export declare class Queue<T> {
    private tail;
    private head;
    private offset;
    private hLength;
    constructor();
    readonly length: number;
    first(): T;
    push(item: T): void;
    pop(): T | undefined;
    unshift(item: T): void;
    shift(): T | undefined;
    reset(): void;
    migrateTo(queue: Queue<T>): Queue<T>;
}
