/// <reference types="node" />
import { BufferVisitor } from './common';
import { Frame } from './frame';
import { ConnectionID, PacketNumber, SocketAddress, QuicTag, SessionType } from './protocol';
export declare function parsePacket(bufv: BufferVisitor, packetSentBy: SessionType, _version?: string): Packet;
/** Packet representing a base Packet. */
export declare abstract class Packet {
    flag: number;
    connectionID: ConnectionID;
    constructor(connectionID: ConnectionID, flag: number);
    isReset(): boolean;
    isNegotiation(): boolean;
    isRegular(): boolean;
    abstract byteLen(): number;
    abstract writeTo(bufv: BufferVisitor): BufferVisitor;
    static fromBuffer(_bufv: BufferVisitor, _flag?: number): Packet;
}
/** ResetPacket representing a reset Packet. */
export declare class ResetPacket extends Packet {
    nonceProof: Buffer;
    packetNumber: PacketNumber | null;
    socketAddress: SocketAddress | null;
    tags: QuicTag;
    constructor(connectionID: ConnectionID, tags: QuicTag);
    byteLen(): number;
    writeTo(bufv: BufferVisitor): BufferVisitor;
    static fromBuffer(bufv: BufferVisitor): ResetPacket;
}
/** NegotiationPacket representing a negotiation Packet. */
export declare class NegotiationPacket extends Packet {
    versions: string[];
    constructor(connectionID: ConnectionID, versions: string[]);
    byteLen(): number;
    writeTo(bufv: BufferVisitor): BufferVisitor;
    static fromConnectionID(connectionID: ConnectionID): NegotiationPacket;
    static fromBuffer(bufv: BufferVisitor): NegotiationPacket;
}
/** RegularPacket representing a regular Packet. */
export declare class RegularPacket extends Packet {
    packetNumber: PacketNumber;
    version: string;
    nonce: Buffer | null;
    frames: Frame[];
    constructor(connectionID: ConnectionID, packetNumber: PacketNumber, nonce?: Buffer | null);
    setVersion(version: string): void;
    /**
     * @param {Array<Frame>} frames
     * @return {this}
     */
    addFrames(...frames: Frame[]): this;
    byteLen(): number;
    writeTo(bufv: BufferVisitor): BufferVisitor;
    static fromBuffer(bufv: BufferVisitor, flag: number): RegularPacket;
}
